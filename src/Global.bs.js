// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");

var innerHeightRef = {
  contents: 0
};

var isLandscapeRef = {
  contents: true
};

function updateUIStateOnLoadOrResize(param) {
  innerHeightRef.contents = window.innerHeight;
  isLandscapeRef.contents = Caml_obj.caml_lessthan(window.innerHeight, window.innerWidth);
  console.log("innerHeight: " + String(innerHeightRef.contents) + " isLandscape: " + String(isLandscapeRef.contents));
  ((document.getElementById("resizecomponents").click()));
  
}

Curry._2(window.addEventListener, "resize", (function (_event) {
        console.log("event window resize..");
        return updateUIStateOnLoadOrResize(undefined);
      }));

Curry._2(window.addEventListener, "load", (function (_event) {
        console.log("event window load..");
        return updateUIStateOnLoadOrResize(undefined);
      }));

var initialState_videoContainerIds = ["local-participant"];

var initialState = {
  innerHeight: 0,
  isLandscape: true,
  videoContainerIds: initialState_videoContainerIds
};

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* Inc */0 :
          return {
                  innerHeight: state.innerHeight + 1 | 0,
                  isLandscape: state.isLandscape,
                  videoContainerIds: state.videoContainerIds
                };
      case /* Dec */1 :
          return {
                  innerHeight: state.innerHeight - 1 | 0,
                  isLandscape: state.isLandscape,
                  videoContainerIds: state.videoContainerIds
                };
      case /* Reset */2 :
          return {
                  innerHeight: 0,
                  isLandscape: state.isLandscape,
                  videoContainerIds: state.videoContainerIds
                };
      
    }
  } else {
    switch (action.TAG | 0) {
      case /* MultByN */0 :
          return {
                  innerHeight: Math.imul(state.innerHeight, action._0),
                  isLandscape: state.isLandscape,
                  videoContainerIds: state.videoContainerIds
                };
      case /* MultByNM */1 :
          return {
                  innerHeight: Math.imul(Math.imul(state.innerHeight, action._0), action._1),
                  isLandscape: state.isLandscape,
                  videoContainerIds: state.videoContainerIds
                };
      case /* ResizeComponents */2 :
          return {
                  innerHeight: action._0,
                  isLandscape: action._1,
                  videoContainerIds: state.videoContainerIds
                };
      case /* AddRemoteParticipantSid */3 :
          var videoContainerIds = state.videoContainerIds.concat([action._0]);
          return {
                  innerHeight: state.innerHeight,
                  isLandscape: state.isLandscape,
                  videoContainerIds: videoContainerIds
                };
      case /* RemoveRemoteParticipantSid */4 :
          var id = action._0;
          var copyOfVideoContainerIds = state.videoContainerIds.slice();
          var index = copyOfVideoContainerIds.findIndex(function (x) {
                return x === id;
              });
          console.log("index:" + String(index));
          if (index !== -1) {
            copyOfVideoContainerIds.splice(index, 1);
          }
          var newState_innerHeight = state.innerHeight;
          var newState_isLandscape = state.isLandscape;
          var newState = {
            innerHeight: newState_innerHeight,
            isLandscape: newState_isLandscape,
            videoContainerIds: copyOfVideoContainerIds
          };
          console.log(newState);
          return newState;
      
    }
  }
}

exports.innerHeightRef = innerHeightRef;
exports.isLandscapeRef = isLandscapeRef;
exports.updateUIStateOnLoadOrResize = updateUIStateOnLoadOrResize;
exports.initialState = initialState;
exports.reducer = reducer;
/*  Not a pure module */
