// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");

var innerHeightRef = {
  contents: 0
};

var isLandscapeRef = {
  contents: true
};

function updateUIStateOnLoadOrResize(param) {
  innerHeightRef.contents = window.innerHeight;
  isLandscapeRef.contents = Caml_obj.caml_lessthan(window.innerHeight, window.innerWidth);
  console.log("innerHeight: " + String(innerHeightRef.contents) + " isLandscape: " + String(isLandscapeRef.contents));
  ((document.getElementById("resizecomponents").click()));
  
}

Curry._2(window.addEventListener, "resize", (function (_event) {
        console.log("event window resize..");
        return updateUIStateOnLoadOrResize(undefined);
      }));

Curry._2(window.addEventListener, "load", (function (_event) {
        console.log("event window load..");
        return updateUIStateOnLoadOrResize(undefined);
      }));

var initialLocalDevice_videoContainerIds = ["local-participant"];

var initialLocalDevice = {
  innerHeight: 0,
  isLandscape: true,
  videoContainerIds: initialLocalDevice_videoContainerIds
};

var initialGame = {
  count: 0
};

var initialState = {
  localDevice: initialLocalDevice,
  game: initialGame
};

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* ResizeComponents */0 :
        var init = state.localDevice;
        var localDevice_innerHeight = action._0;
        var localDevice_isLandscape = action._1;
        var localDevice_videoContainerIds = init.videoContainerIds;
        var localDevice = {
          innerHeight: localDevice_innerHeight,
          isLandscape: localDevice_isLandscape,
          videoContainerIds: localDevice_videoContainerIds
        };
        return {
                localDevice: localDevice,
                game: state.game
              };
    case /* AddRemoteParticipantSid */1 :
        var videoContainerIds = state.localDevice.videoContainerIds.concat([action._0]);
        var init$1 = state.localDevice;
        var localDevice_innerHeight$1 = init$1.innerHeight;
        var localDevice_isLandscape$1 = init$1.isLandscape;
        var localDevice$1 = {
          innerHeight: localDevice_innerHeight$1,
          isLandscape: localDevice_isLandscape$1,
          videoContainerIds: videoContainerIds
        };
        return {
                localDevice: localDevice$1,
                game: state.game
              };
    case /* RemoveRemoteParticipantSid */2 :
        var id = action._0;
        var copyOfVideoContainerIds = state.localDevice.videoContainerIds.slice();
        var index = copyOfVideoContainerIds.findIndex(function (x) {
              return x === id;
            });
        console.log("index:" + String(index));
        if (index !== -1) {
          copyOfVideoContainerIds.splice(index, 1);
        }
        var init$2 = state.localDevice;
        var localDevice_innerHeight$2 = init$2.innerHeight;
        var localDevice_isLandscape$2 = init$2.isLandscape;
        var localDevice$2 = {
          innerHeight: localDevice_innerHeight$2,
          isLandscape: localDevice_isLandscape$2,
          videoContainerIds: copyOfVideoContainerIds
        };
        return {
                localDevice: localDevice$2,
                game: state.game
              };
    
  }
}

exports.innerHeightRef = innerHeightRef;
exports.isLandscapeRef = isLandscapeRef;
exports.updateUIStateOnLoadOrResize = updateUIStateOnLoadOrResize;
exports.initialLocalDevice = initialLocalDevice;
exports.initialGame = initialGame;
exports.initialState = initialState;
exports.reducer = reducer;
/*  Not a pure module */
